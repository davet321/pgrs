require 'compass'
require 'susy'
require 'sitemap_generator/tasks'
require 'juicer'

appengine = File.join('..', 'google_appengine')
SITE.exclude += [/.*\.swp/, 'images/icons-24/', 'images/icons-36/', 'images/icons-72/', 'images/tab-bases/']

Compass.configuration do |config|
    config.project_path = File.join(File.dirname(__FILE__), 'content')
    config.sass_dir = 'stylesheets'
    config.images_dir = 'images'
    config.sass_options = { :syntax => :scss }
end

Webby.site.sass_options.update(Compass.sass_engine_options)

task :default => :build

task :build => :scripts
task :scripts do |t|
    scripts_dir = File.join(Compass.configuration.project_path, 'scripts')
    scripts = Dir.glob(File.join(scripts_dir, '*.js'))
    output = File.join(scripts_dir, 'scripts.js')
    merger = Juicer::Merger::JavaScriptMerger.new(scripts)
    merger.set_next('yui_compressor'.classify(Juicer::Minifyer).new({:bin_path => File.join(Juicer.home, "lib", 'yui_compressor', "bin")}))
    merger.save(output)
end

desc 'deploy the site to the webserver'
task :deploy => [:compress, :rebuild, :'sitemap:create', :'deploy:google']

task :'deploy:google' do |t|
    sh "#{appengine}/appcfg.py", '--oauth2', 'update', 'output'
end

desc 'starts a local server'
task :server do |t|
    command = []
    command << "#{appengine}/dev_appserver.py"
    host = Webby.site.args.raw[0]
    if host then
        command << '--host'
        command << host
    end
    command << 'output'
    sh *command
end

task :compress do |t|
    Compass.configuration do |config|
        config.sass_options.update({ :style => :compressed })
    end
    Webby.site.sass_options.update(Compass.sass_engine_options)
end

namespace :event do
  FileList["#{Webby.site.template_dir}/events/*"].each do |template|
    next unless test(?f, template)
    name = template.pathmap '%n'

    # if the file is a partial template
    name = $1 if name =~ %r/^_(.*)/

    desc "Create a new #{name} on supplied date (format yyyymmddHHMM)"
    task name do |t|
      date, title, dir = Webby::Builder.new_page_info
      date = DateTime.strptime(date, '%Y%m%d%H%M')
      page = File.join('events', name + '_' + date.strftime('%Y%m%d'))
      page = Webby::Builder.create(page, :from => template,
               :locals => {
                 :title => title,
                 :directory => dir,
                 :datetime => date.strftime('%Y-%m-%dT%H:%M:00Z'),
               })
    end
  end
end

desc 'creates a week worth of regular events starting on supplied Monday (format yyyymmdd)'
task :week do |t|
    monday = Date.strptime(Webby.site.args.raw[0], '%Y%m%d')
    events = {
        :drink => DateTime.new(monday.year, monday.month, monday.mday, 17, 30) + 1,
        :food => DateTime.new(monday.year, monday.month, monday.mday, 12, 30) + 2 ,
        :badminton => DateTime.new(monday.year, monday.month, monday.mday, 17) + 4,
    }
    events.each do |k,v|
        sh "webby event:#{k} #{v.strftime('%Y%m%d%H%M')}\n"
    end
end

task :build => :copybuild
task :copybuild do |t|
    FileUtils.remove_dir 'previous_' + Webby.site.output_dir, :force => true
    FileUtils.cp_r Webby.site.output_dir, 'previous_' + Webby.site.output_dir
end

desc 'generates all the dynamic images from the base image'
task :images do |t|
    commands = []
    hues = [ 133, 166, 200, 233, 266 ]

    (2..6).each do |i|
        hue = hues[i-2]
        commands << "convert content/images/labels/label_1.png -modulate 50,200,#{hue} content/images/labels/label_#{i}.png"
        commands << "convert content/images/tab-headers/tab-header_1.png -modulate 50,200,#{hue} content/images/tab-headers/tab-header_#{i}.png"
    end

    (1..6).each do |i|
        width = 60
        height = 60
        tab_height = 25
        border_width = 4 # Has to match value given in content/stylesheets/_base.css
        commands << "convert content/images/tab-headers/tab-header_#{i}.png -gravity SouthWest -crop #{width}x#{height}+0+0 -flip -alpha set -region #{width-2*border_width}x#{height-2*border_width}+#{border_width}+#{border_width} -alpha transparent content/images/borders/border_#{i}.png"
        commands << "convert content/images/tab-headers/tab-header_#{i}.png -gravity SouthWest -crop #{width}x#{tab_height}+0+0 -flip content/images/tab-bases/tab-base_#{i}.png"
    end

    commands.each do |command|
        print command, "\n"
        system command
    end
end
# EOF
